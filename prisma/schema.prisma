generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                       String  @id
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model action {
  actionId String   @unique(map: "Action_actionId_key")
  tripId   String
  type     String
  dateTime DateTime
  count    Int
  trip     trip     @relation(fields: [tripId], references: [tripId], onDelete: Cascade, map: "Action_tripId_fkey")

  @@index([tripId], map: "Action_tripId_fkey")
}

model expense {
  id          String @unique(map: "Expense_id_key")
  tripId      String
  description String
  amount      Float
  paidBy      String
  sharedWith  Json
  trip        trip   @relation(fields: [tripId], references: [tripId], onDelete: Cascade, map: "Expense_tripId_fkey")

  @@index([tripId], map: "Expense_tripId_fkey")
}

model person {
  personId String @unique(map: "Person_personId_key")
  tripId   String
  name     String
  trip     trip   @relation(fields: [tripId], references: [tripId], onDelete: Cascade, map: "Person_tripId_fkey")

  @@index([tripId], map: "Person_tripId_fkey")
}

model plan {
  tripId     String
  planId     String @unique(map: "Plan_planId_key")
  planName   String
  colour     String @default("blue")
  planType   String
  date       String
  startTime  String
  endTime    String
  notes      String @db.LongText
  additional Json
  trip       trip   @relation(fields: [tripId], references: [tripId], onDelete: Cascade, map: "Plan_tripId_fkey")

  @@index([tripId], map: "Plan_tripId_fkey")
}

model post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  createdById String
  user        user     @relation(fields: [createdById], references: [id], map: "Post_createdById_fkey")

  @@index([createdById], map: "Post_createdById_fkey")
  @@index([name], map: "Post_name_idx")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model trip {
  tripId              String    @unique(map: "Trip_tripId_key")
  tripName            String    @default("Untitled")
  destination         String
  startDate           String
  endDate             String
  messages            Json
  backendMessages     Json
  events              Json
  historyString       String    @db.LongText
  changed             Boolean   @default(false)
  costMessages        Json
  costBackendMessages Json
  costPeople          Json
  costExpenses        Json
  costHistoryString   String    @db.LongText
  costChanged         Boolean   @default(false)
  action              action[]
  expense             expense[]
  person              person[]
  plan                plan[]
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  account       account[]
  post          post[]
  session       session[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
